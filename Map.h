#ifndef MAP_H_DEFINED
#define MAP_H_DEFINED

#include <vector>
#include <unordered_set>
#include <cstdlib>


#include "Tile.h"
class Animal;
class Plant;

class Map {
public:
	Map(int width, int height);
	Map();

	vector< vector<Tile*> >* mapGrid;
	//vector< vector<Tile*> >* bufferboard;
	int width;
	int height;

	//Possibly add list (unordered set) of Entities, Plants/ Animals for added effieciency in search.

	//Lists of entities to iterate through in the updateEntities function.
	unordered_set<Entity*> entities; //currently unused
	unordered_set<Animal*> animals; //for 	//move  //Eat / Action //Death //Reproduce  update gamestate
	unordered_set<Plant*> plants; //for Reproduce
	unordered_set<Animal*> toDestroyAnimals;
	unordered_set<Plant*> toDestroyPlants;

	void buildMap(int width, int height);

	//getTile - Returns a pointer to tile at position x y of the map
	//Param posX - x position of Tile
	//Param posY - y position of Tile
	//Return - Pointer to tile at location x y in the map is returned
	//Pre - x and y positions are within map bounds, else nullptr is returned.
	//Post - if x and y are in map bounds, a pointer to Tile at location x y is returned.
	Tile *getTile(int posX, int posY);

	//getRandomTile - Returns a pointer to a random Tile in the map.
	//Return - A pointer to a random Tile in the map
	//Pre - Map height and width are non-zero.
	//Post - A pointer to a random Tile from the map is returned.
	Tile* getRandomTile();

	//getEntityOfTypeFromTile - Returns a pointer to an Entity if it meets the type, layer, and tile arguements.
	//Param entityType - The EntityID corresponding with the derived entity being searched for.
	//Param layerNum - The Tile layer in which to search for the entity.
	//Param tile - The tile in which to search for the entity.
	//Return - A pointer to an entity meeting all arguement specifiers, otherwise a nullptr.
	//Pre - The game has been initialized.
	//Post - If there is an entity that meets the arguement specifiers, a poitner to that Entity has been returned.
	Entity* getEntityOfTypeFromTile(int entityType, int layerNum, Tile* tile);

	//getClosestEntityInRange - Returns a pointer to the closest entity meeting arguement specifiers.
	//Param entityType - The EntityID corresponding witht he derived entity class being searched for.
	//Param layerNum - The Tile layer number in which to search for the entity.
	//Param centerTile - A pointer from which to search outwards.
	//Param maxRadius - The maximum distance from the centerTile which will be searched for the entity.
	//Return - A pointer to the closest entity of specified type if it resides within the searched area.
	//Pre - Game has been initialized.
	//Post - A pointer to the closest entity of specified type has been returned.SS
	Entity* getClosestEntityInRange(int entityType, int layerNum, Tile* centerTile, int maxRadius);

	//updateEntities - Autogenerate derived entities if populations are low.  Iterate through all entities and update them.
	//Pre - Game is initialized.
	//Post - Entities were autogenerated if populations were low.  Updates were called on all entities,
	//	including checkMove, checkAction, checkReproduce, and checkDeath.
	void updateEntities();

};

#endif /* MAP_H_DEFINED */
